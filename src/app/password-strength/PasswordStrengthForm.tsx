"use client";

import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Wand2, ThumbsUp, AlertCircle } from 'lucide-react';
import { suggestStrongerPasswords, type SuggestStrongerPasswordsOutput } from './actions'; // Server action
import { useToast } from "@/hooks/use-toast";

const formSchema = z.object({
  password: z.string().min(1, { message: 'Password cannot be empty.' }).min(6, { message: 'Password should be at least 6 characters for analysis.' }),
});

type PasswordFormValues = z.infer<typeof formSchema>;

export function PasswordStrengthForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [suggestions, setSuggestions] = useState<SuggestStrongerPasswordsOutput | null>(null);
  const { toast } = useToast();

  const form = useForm<PasswordFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      password: '',
    },
  });

  const onSubmit = async (data: PasswordFormValues) => {
    setIsLoading(true);
    setSuggestions(null);
    try {
      const result = await suggestStrongerPasswords({ password: data.password });
      setSuggestions(result);
      if (result.suggestions.length === 0) {
        toast({
          title: "Strong Password!",
          description: "Your password seems strong, or no specific improvement suggestions were found.",
          className: "bg-green-600 text-white dark:bg-green-700 dark:text-primary-foreground", // Adjusted dark mode colors
          duration: 5000,
        });
      } else {
         toast({
          title: "Suggestions Generated",
          description: "AI has provided some suggestions to improve your password.",
        });
      }
    } catch (error) {
      console.error("Error fetching password suggestions:", error);
      toast({
        title: "Error",
        description: "Could not fetch password suggestions. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel className="text-lg">Password to Analyze</FormLabel>
                <FormControl>
                  <Input type="text" placeholder="Enter your password" {...field} className="text-base py-3 px-4 bg-background border-border focus:ring-primary" />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          <Button type="submit" className="w-full text-lg py-3" disabled={isLoading}>
            {isLoading ? (
              <Loader2 className="mr-2 h-5 w-5 animate-spin" />
            ) : (
              <Wand2 className="mr-2 h-5 w-5" />
            )}
            Get Suggestions
          </Button>
        </form>
      </Form>

      {suggestions && (
        <Card className="mt-6 shadow-md">
          <CardHeader>
            <CardTitle className="text-xl flex items-center">
              {suggestions.suggestions.length > 0 ? 
                <AlertCircle className="mr-2 h-6 w-6 text-yellow-500" /> :
                <ThumbsUp className="mr-2 h-6 w-6 text-green-500" />
              }
              Analysis Results
            </CardTitle>
            <CardDescription>
              {suggestions.suggestions.length > 0 
                ? "Here are some AI-generated suggestions to strengthen your password:"
                : "Your password appears to be strong, or no specific suggestions were generated by the AI."}
            </CardDescription>
          </CardHeader>
          {suggestions.suggestions.length > 0 && (
            <CardContent className="space-y-4">
              {suggestions.suggestions.map((suggestion, index) => (
                <div key={index} className="p-4 border rounded-md bg-muted/50">
                  <p className="font-semibold text-primary text-lg">
                    Suggestion {index + 1}: <code className="bg-card text-card-foreground px-2 py-1 rounded">{suggestion}</code>
                  </p>
                  <p className="text-sm text-muted-foreground mt-1">
                    <span className="font-medium text-foreground">Reasoning:</span> {suggestions.reasoning[index]}
                  </p>
                </div>
              ))}
            </CardContent>
          )}
        </Card>
      )}
    </div>
  );
}
